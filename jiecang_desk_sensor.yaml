esphome:
  name: jiecang_desk_sensor
  friendly_name: Jiecang Desk Sensor
  includes:
    - jiecang_desk_sensor.h
  on_boot:
    priority: 0 # when mostly everything else is done
    then:
      - uart.write: [0xF1, 0xF1, 0x0C, 0x00, 0x0C, 0x7e] # request physical limits
      - delay: 0.1s
      - uart.write: [0xF1, 0xF1, 0x20, 0x00, 0x20, 0x7e] # request limits
      - delay: 0.1s
      - uart.write: [0xF1, 0xF1, 0x07, 0x00, 0x07, 0x7e] # request settings

esp8266:
  board: esp01_1m

# Enable logging
logger:
  level: VERBOSE #makes uart stream available in esphome logstream
  baud_rate: 0 #disable logging over uart

# Enable Home Assistant API
api:
  encryption:
    key: !secret encryption_key

ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "esphome-desk"
    password: "9ebc6eac0b4e0e26b8d3b955ec660557"

captive_portal:

uart:
  id: uart_bus
  tx_pin: TX
  rx_pin: RX
  baud_rate: 9600

sensor:
- platform: custom
  lambda: |-
    auto desk = new JiecangDeskSensor(id(uart_bus));
    App.register_component(desk);
    return {desk->height,desk->height_pct,desk->unit,desk->height_min,desk->height_max,desk->position1,desk->position2,desk->position3,desk->position4};
  sensors:
    - id: "desk_height"
      name: "Height"
      unit_of_measurement: cm
      accuracy_decimals: 1
    - id: "desk_height_pct"
      name: "Height Percent"
      unit_of_measurement: "%"
    - id: "desk_height_unit"
      on_value:
        then:
          - select.set_index:
              id: unit
              index: !lambda return id(desk_height_unit).state;
    - id: "desk_height_min"
      name: "Height Min"
      unit_of_measurement: cm # !lambda return id(unit).state
      accuracy_decimals: 1
    - id: "desk_height_max"
      name: "Height Max"
      unit_of_measurement: cm
      accuracy_decimals: 1
    - id: "desk_position1"
      name: "Position 1"
      unit_of_measurement: cm
      accuracy_decimals: 1
    - id: "desk_position2"
      name: "Position 2"
      unit_of_measurement: cm
      accuracy_decimals: 1
    - id: "desk_position3"
      name: "Position 3"
      unit_of_measurement: cm
      accuracy_decimals: 1
    - id: "desk_position4"
      name: "Position 4"
      unit_of_measurement: cm
      accuracy_decimals: 1


select:
  - platform: template
    name: Unit
    id: unit
    options:
     - "cm"
     - "inch"
    initial_option: "cm"
    optimistic: true
    set_action:
      then:
        - if:
            condition:
              - lambda: return id(unit).state == "cm";
            then:
              - uart.write: [0xF1, 0xF1, 0x0E, 0x01, 0x00, 0x0F, 0x7e]
            else:
              - uart.write: [0xF1, 0xF1, 0x0E, 0x01, 0x01, 0x10, 0x7e]
#  - platform: template
#    name: "Anti collision sensitivity"
#    id: anti_collision
#    options:
#     - "High"
#     - "Medium"
#     - "Low"
#    initial_option: "High"
#    optimistic: true
#    set_action:
#      then:
#        - if:
#            condition:
#              - lambda: |-
#                  return id(unit).state == "High" ;
#            then:
#              - uart.write: [0xF1, 0xF1, 0x1D, 0x01, 0x01, 0x1F, 0x7e]
#            else:
#              - if:
#                  condition:
#                    - lambda: |-
#                        return id(unit).state == "Medium" ;
#                  then:
#                    - uart.write: [0xF1, 0xF1, 0x1D, 0x01, 0x02, 0x20, 0x7e]
#                  else:
#                    - uart.write: [0xF1, 0xF1, 0x1D, 0x01, 0x03, 0x21, 0x7e]

button:
  - platform: template
    name: "Move up"
    on_press:
      - lambda: |-
          if (id(moving) != 0) {
            id(moving) = 0;
          } else {
            id(moving) = 1;
            id(move_up).execute();
          }
  - platform: template
    name: "Move down"
    on_press:
      - lambda: |-
          if (id(moving) != 0) {
            id(moving) = 0;
          } else {
            id(moving) = 2;
            id(move_down).execute();
          }
  - platform: template
    name: "Move stop"
    on_press:
      - lambda: 'id(moving) = 0;'
  - platform: template
    name: "Step up"
    on_press:
      - uart.write: [0xF1, 0xF1, 0x01, 0x00, 0x01, 0x7e]
      - lambda: 'id(moving) = 0;'
  - platform: template
    name: "Step down"
    on_press:
      - uart.write: [0xF1, 0xF1, 0x02, 0x00, 0x02, 0x7e]
      - lambda: 'id(moving) = 0;'
  - platform: template
    name: "Position 1"
    on_press:
      - uart.write: [0xF1, 0xF1, 0x05, 0x00, 0x05, 0x7e]
      - lambda: 'id(moving) = 0;'
  - platform: template
    name: "Position 2"
    on_press:
      - uart.write: [0xF1, 0xF1, 0x06, 0x00, 0x06, 0x7e]
      - lambda: 'id(moving) = 0;'
  - platform: template
    name: "Position 3"
    on_press:
      - uart.write: [0xF1, 0xF1, 0x27, 0x00, 0x27, 0x7e]
      - lambda: 'id(moving) = 0;'
  - platform: template
    name: "Position 4"
    on_press:
      - uart.write: [0xF1, 0xF1, 0x28, 0x00, 0x28, 0x7e]
      - lambda: 'id(moving) = 0;'
  - platform: uart
    name: "Request Settings"
    data: [0xF1, 0xF1, 0x07, 0x00, 0x07, 0x7e]
  - platform: uart
    name: "Request Limits"
    data: [0xF1, 0xF1, 0x20, 0x00, 0x20, 0x7e]
#  - platform: uart
#    name: "Wake"
#    data: [0xF1, 0xF1, 0x29, 0x00, 0x29, 0x7e]
#  - platform: uart
#    name: "Set Limit Max"
#    data: [0xF1, 0xF1, 0x21, 0x00, 0x21, 0x7e]
#  - platform: uart
#    name: "Set Limit Min"
#    data: [0xF1, 0xF1, 0x22, 0x00, 0x22, 0x7e]
#  - platform: uart
#    name: "Clear Limit Max"
#    data: [0xF1, 0xF1, 0x23, 0x01, 0x01, 0x25, 0x7e]
#  - platform: uart
#    name: "Clear Limit Min"
#    data: [0xF1, 0xF1, 0x23, 0x01, 0x02, 0x26, 0x7e]
#  - platform: uart
#    name: "Set Position 1"
#    data: [0xF1, 0xF1, 0x03, 0x00, 0x03, 0x7e]
#  - platform: uart
#    name: "Set Position 2"
#    data: [0xF1, 0xF1, 0x04, 0x00, 0x04, 0x7e]
#  - platform: uart
#    name: "Set Position 3"
#    data: [0xF1, 0xF1, 0x25, 0x00, 0x25, 0x7e]
#  - platform: uart
#    name: "Set Position 4"
#    data: [0xF1, 0xF1, 0x26, 0x00, 0x26, 0x7e]


globals:
  - id: moving
    type: int
    restore_value: no
    initial_value: "0"

script:
  - id: move_up
    mode: single
    then:
      - while:
          condition:
            lambda: 'return id(moving) == 1 && id(desk_height).state < id(desk_height_max).state - 0.1;'
          then:
            - uart.write: [0xF1, 0xF1, 0x01, 0x00, 0x01, 0x7e]
            - delay: 0.5s
  - id: move_down
    mode: single
    then:
      - while:
          condition:
            lambda: 'return id(moving) == 2 && id(desk_height).state > id(desk_height_min).state + 0.1;'
          then:
            - uart.write: [0xF1, 0xF1, 0x02, 0x00, 0x02, 0x7e]
            - delay: 0.5s

